// Generated by CoffeeScript 1.8.0
(function() {
  var Animal, Bird, Camera, VideoCam, bird, canon, dog, myObject, obj, obj2, videoCam,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Animal = (function() {
    function Animal(name) {
      this.name = name;
      this.walk = __bind(this.walk, this);
      this.lastname = 'lastname';
    }

    Animal.prototype.instancePro = 'nice stuff';

    Animal.prototype.protoMethod = function(pro) {
      var a;
      console.log(this.name);
      a = 'hello';
    };

    Animal.prototype.walk = function() {
      console.log('hello');
      return console.log('walking ', this.name);
    };

    return Animal;

  })();

  Bird = (function(_super) {
    __extends(Bird, _super);

    function Bird() {
      return Bird.__super__.constructor.apply(this, arguments);
    }

    Bird.prototype.checkLastname = function() {
      return this.lastname;
    };

    return Bird;

  })(Animal);

  dog = new Animal('good');

  dog.protoMethod('proto');

  dog.walk();

  bird = new Bird('betty');

  bird.walk();

  console.log(bird.checkLastname());

  obj = function() {};

  myObject = {
    doSomething: function() {
      return 'fooo';
    }
  }.doSomething();

  obj2 = {
    doSome: function(foo, callback) {
      var objCb;
      objCb = {
        fn: function(cb) {
          cb();
        }
      };
      console.log(foo);
      callback.call(this, foo, objCb);
    }
  };

  obj2.doSome('good stuff', function(x, cb2) {
    console.log('tell me it:');
    return cb2.fn(function(cb) {});
  });

  Camera = (function() {
    function Camera(brand, type) {
      var privateVar;
      if (brand == null) {
        brand = 'nikon';
      }
      if (type == null) {
        type = 'zoom';
      }
      this.callSuper = __bind(this.callSuper, this);
      this.charge = __bind(this.charge, this);
      this.shoot = __bind(this.shoot, this);
      this.brand = brand;
      this.type = type;
      privateVar = 'Private variable';
      return;
    }

    Camera.prototype.getType = function() {
      return this.type;
    };

    Camera.prototype.shoot = function() {
      return 'Shooting: ' + this.name;
    };

    Camera.prototype.charge = function() {
      return 'Charging';
    };

    Camera.prototype.callSuper = function(superArg) {
      return console.log("This is the parent class: " + superArg);
    };

    Camera.prototype.getPrivate = function() {
      return typeof privateVar !== "undefined" && privateVar !== null;
    };

    Camera.classLevel = function() {
      console.log('class level function');
    };

    return Camera;

  })();

  canon = new Camera('cannon', 'Mannual');

  console.log(canon.getPrivate());

  VideoCam = (function(_super) {
    __extends(VideoCam, _super);

    function VideoCam() {
      return VideoCam.__super__.constructor.apply(this, arguments);
    }

    VideoCam.prototype.shoot = function() {
      return 'We are videos tapping';
    };

    VideoCam.prototype.callSuper = function(superArg) {
      VideoCam.__super__.callSuper.call(this, 'hello super arg');
      return console.log("this is the child: " + superArg);
    };

    return VideoCam;

  })(Camera);

  videoCam = new VideoCam('JVC');

  console.log(videoCam.getType());

  console.log(videoCam);

  videoCam.callSuper('Incetance super arg');

  VideoCam.classLevel();

  conole.log(VideoCam);

  console.log(VideoCam.__super__.shoot());

}).call(this);

//# sourceMappingURL=klass.js.map
